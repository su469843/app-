name: Android Hello World Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发工作流

# 添加必要的权限
permissions:
  contents: write
  packages: write
  
jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: List project files
        run: ls -la
        
      - name: Check for updat.md file
        run: |
          mkdir -p app/updat
          if [ ! -f app/updat/updat.md ]; then
            echo "Warning: updat.md file is missing, creating default one."
            echo "v1.0.0" > app/updat/updat.md
            echo "# 天气预报应用" >> app/updat/updat.md
            echo "首次发布" >> app/updat/updat.md
          fi
          
      - name: Clean up conflicting icon resources
        run: |
          echo "Checking for conflicting icon resources..."
          # Remove .webp files if both .webp and .png exist
          for DIR in app/src/main/res/mipmap-*; do
            if [ -d "$DIR" ]; then
              echo "Checking directory: $DIR"
              for BASE in ic_launcher ic_launcher_round; do
                if [ -f "$DIR/$BASE.webp" ] && [ -f "$DIR/$BASE.png" ]; then
                  echo "Found conflict: $DIR/$BASE.webp and $DIR/$BASE.png"
                  echo "Removing: $DIR/$BASE.webp"
                  rm "$DIR/$BASE.webp"
                fi
              done
            fi
          done
        
      - name: Show Gradle properties
        run: cat gradle.properties || echo "gradle.properties not found"
        
      - name: Print environment info
        run: |
          echo "Memory info:"
          free -h
          echo "Disk space:"
          df -h
          echo "Java version:"
          java -version
          
      - name: Backup original gradle.properties
        run: cp gradle.properties gradle.properties.bak || echo "No gradle.properties to backup"
          
      - name: Configure Gradle properties
        run: |
          # Create new file instead of appending to existing one
          echo "# Project-wide Gradle settings" > gradle.properties.new
          echo "org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError" >> gradle.properties.new
          echo "org.gradle.parallel=true" >> gradle.properties.new
          echo "org.gradle.caching=true" >> gradle.properties.new
          echo "org.gradle.daemon=false" >> gradle.properties.new
          echo "android.useAndroidX=true" >> gradle.properties.new
          echo "android.enableJetifier=false" >> gradle.properties.new
          echo "kotlin.incremental=false" >> gradle.properties.new
          echo "android.nonTransitiveRClass=true" >> gradle.properties.new
          echo "kotlin.code.style=official" >> gradle.properties.new
          echo "android.enableR8.fullMode=false" >> gradle.properties.new
          mv gradle.properties.new gradle.properties
        
      - name: Validate Gradle properties
        run: cat gradle.properties
        
      - name: Debug Kotlin Errors
        run: ./gradlew compileDebugKotlin --stacktrace --debug --scan || echo "Kotlin compilation failed, proceeding with more detailed error checking."
        
      - name: Check for file compilation errors
        if: ${{ failure() }}
        run: |
          echo "Looking for specific compilation errors..."
          ./gradlew compileDebugKotlin --stacktrace --info > compilation_errors.log
          cat compilation_errors.log
          if grep -q "Random" compilation_errors.log; then
            echo "Possible issue with Random implementation found."
          fi
          if grep -q "Unresolved reference" compilation_errors.log; then
            echo "Unresolved reference found in code."
          fi
        
      - name: Build with Gradle (Clean first)
        run: ./gradlew clean assembleDebug --stacktrace --info --warning-mode all --no-daemon --refresh-dependencies
        
      - name: List APK directory
        run: find . -name "*.apk"
        
      - name: Rename APK
        run: |
          mkdir -p release
          find app/build/outputs/apk/debug -name "*.apk" -exec cp {} release/hello-world-app.apk \;
      
      - name: Generate Release Timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
        
      - name: Extract version from update file
        id: version_info
        run: |
          VERSION=$(head -n 1 app/updat/updat.md)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          cat app/updat/updat.md > ./release_notes.md
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version_info.outputs.version || format('v{0}', steps.timestamp.outputs.timestamp) }}
          name: 天气预报应用 ${{ steps.version_info.outputs.version || format('Build {0}', steps.timestamp.outputs.timestamp) }}
          body_path: ./release_notes.md
          files: release/hello-world-app.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 