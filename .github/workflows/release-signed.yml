name: Signed Release Build

on:
  push:
    branches:
      - master
  workflow_dispatch:  # 允许手动触发工作流
  
jobs:
  Android:
    name: Android Signed Build
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - name: Check out git repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Env
        uses: ./.github/actions/setup

      - name: Clean up conflicting icon resources
        run: |
          echo "Checking for conflicting icon resources..."
          # Remove .webp files if both .webp and .png exist
          for DIR in app/src/main/res/mipmap-*; do
            if [ -d "$DIR" ]; then
              echo "Checking directory: $DIR"
              for BASE in ic_launcher ic_launcher_round; do
                if [ -f "$DIR/$BASE.webp" ] && [ -f "$DIR/$BASE.png" ]; then
                  echo "Found conflict: $DIR/$BASE.webp and $DIR/$BASE.png"
                  echo "Removing: $DIR/$BASE.webp"
                  rm "$DIR/$BASE.webp"
                fi
              done
            fi
          done

      - name: Debug Keystore Variable
        run: |
          # 创建日志目录
          mkdir -p logs
          
          # 检查secret是否设置
          if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "Error: KEYSTORE_BASE64 secret is not set or empty" | tee logs/keystore_debug.log
            exit 1
          fi
          
          # 输出前几个字符以验证格式(不泄露整个内容)
          echo "First 10 characters of KEYSTORE_BASE64: ${KEYSTORE_BASE64:0:10}..." | tee -a logs/keystore_debug.log
          
          # 检查长度
          echo "Length of KEYSTORE_BASE64: ${#KEYSTORE_BASE64}" | tee -a logs/keystore_debug.log
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      - name: Decode Keystore
        run: |
          # 创建临时文件
          echo "${{ secrets.KEYSTORE_BASE64 }}" > keystore_base64.txt
          
          # 检查文件是否有效
          cat keystore_base64.txt | head -c 20 > logs/keystore_head.log
          echo "..." >> logs/keystore_head.log
          
          # 尝试解码
          cat keystore_base64.txt | base64 --decode > app/keystore.jks 2>logs/decode.log || {
            echo "Failed to decode keystore"
            echo "Checking file format..."
            file keystore_base64.txt | tee -a logs/decode.log
            cat logs/decode.log
            exit 1
          }
          
          # 验证生成的文件
          if [ -f app/keystore.jks ]; then
            echo "Keystore file created successfully ($(stat -f %z app/keystore.jks) bytes)" | tee -a logs/decode.log
            ls -la app/keystore.jks >> logs/decode.log
          else
            echo "Keystore file was not created" | tee -a logs/decode.log
            exit 1
          fi
          
          # 清理临时文件
          rm keystore_base64.txt
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      - name: Show system resources
        run: |
          echo "=== Memory Information ===" | tee logs/system_info.log
          free -h | tee -a logs/system_info.log
          
          echo -e "\n=== Disk Space ===" | tee -a logs/system_info.log
          df -h | tee -a logs/system_info.log
          
          echo -e "\n=== Java Version ===" | tee -a logs/system_info.log
          java -version 2>&1 | tee -a logs/system_info.log

      - name: Build Signed APK
        shell: bash
        run: |
          # 配置 Gradle 优化
          cat << EOF > gradle.properties
          org.gradle.jvmargs=-Xmx6g -XX:MaxMetaspaceSize=2g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
          org.gradle.parallel=true
          org.gradle.caching=true
          org.gradle.daemon=false
          android.useAndroidX=true
          android.enableJetifier=false
          kotlin.incremental=true
          android.nonTransitiveRClass=true
          kotlin.code.style=official
          android.enableR8.fullMode=false
          EOF
          
          # 检查 updat.md 文件
          mkdir -p app/updat
          if [ ! -f app/updat/updat.md ]; then
            echo "v1.0.1" > app/updat/updat.md
            echo "# 天气预报应用" >> app/updat/updat.md
            echo "首次发布" >> app/updat/updat.md
          fi
          
          # 设置 Gradle 权限
          chmod +x gradlew
          
          # 清理项目
          ./gradlew clean
          
          # 编译 Debug 版本
          echo "=== Building Debug Version ===" | tee build.log
          ./gradlew assembleDebug --stacktrace --info | tee -a build.log || {
            echo "Debug build failed" | tee -a build.log
            exit 1
          }

          # 编译 Release 版本
          echo -e "\n=== Building Release Version ===" | tee -a build.log
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=app/keystore.jks \
            -Pandroid.injected.signing.store.password="${{ secrets.KEYSTORE_PASSWORD }}" \
            -Pandroid.injected.signing.key.alias="${{ secrets.KEYSTORE_ALIAS }}" \
            -Pandroid.injected.signing.key.password="${{ secrets.KEY_PASSWORD }}" \
            --stacktrace --info | tee -a build.log || {
            echo "Release build failed" | tee -a build.log
            exit 1
          }
          
          # 删除密钥库文件
          rm -f app/keystore.jks

      - name: Get package version
        id: get_version
        run: |
          if [ -f "package.json" ]; then
            VERSION=$(node -p -e 'require("./package.json").version')
          else
            VERSION="1.0.1"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "PACKAGE_VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Create git tag
        uses: pkgdeps/git-tag-action@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          version: ${{ env.PACKAGE_VERSION }}
          git_commit_sha: ${{ github.sha }}
          git_tag_prefix: "v"

      - name: Generate file MD5
        id: md5
        run: |
          echo "Generating MD5 for APK files..."
          cd app/build/outputs/apk/release
          
          echo "MD5 checksums:" > md5_checksums.txt
          md5sum *.apk >> md5_checksums.txt
          cat md5_checksums.txt
          
          echo "APK_MD5<<EOF" >> $GITHUB_ENV
          cat md5_checksums.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apk-files
          path: |
            app/build/outputs/apk/release/*.apk
            app/build/outputs/apk/debug/*.apk
            logs/*
            build.log
          retention-days: 5

  Release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: [Android]
    env:
      PACKAGE_VERSION: ${{ needs.Android.outputs.package_version }}
      
    steps:
      - name: Check out git repository
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: apk-files
          path: ./artifacts

      - name: Generate Release Notes
        run: |
          # 检查是否存在更新日志文件
          if [ -f "publish/changeLog.md" ]; then
            # 复制基础更新日志
            cp publish/changeLog.md ./release_notes.md
          else
            # 创建默认更新日志
            echo "# 天气预报应用 v${PACKAGE_VERSION}" > ./release_notes.md
            echo "" >> ./release_notes.md
            echo "## 更新内容" >> ./release_notes.md
            echo "- 应用更新" >> ./release_notes.md
          fi
          
          # 添加构建日志摘要
          if [ -f artifacts/build.log ]; then
            echo -e "\n### Build Summary" >> ./release_notes.md
            echo "\`\`\`" >> ./release_notes.md
            grep -A 5 "BUILD SUCCESSFUL" artifacts/build.log >> ./release_notes.md || echo "Build log not found" >> ./release_notes.md
            echo "\`\`\`" >> ./release_notes.md
          fi
          
          # 添加MD5校验
          echo -e "\n### File MD5\n\`\`\`" >> ./release_notes.md
          cd artifacts
          find . -name "*.apk" -exec md5sum {} \; >> ../release_notes.md
          echo -e "\`\`\`\n" >> ../release_notes.md
          
          # 添加构建信息
          echo -e "\n### Build Info" >> ./release_notes.md
          echo "- Build Date: $(date +'%Y-%m-%d %H:%M:%S')" >> ./release_notes.md
          echo "- GitHub Action Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> ./release_notes.md

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: ./release_notes.md
          prerelease: false
          draft: false
          tag_name: v${PACKAGE_VERSION}
          files: |
            artifacts/release/weather-app-v${PACKAGE_VERSION}-arm64-v8a.apk
            artifacts/release/weather-app-v${PACKAGE_VERSION}-armeabi-v7a.apk
            artifacts/release/weather-app-v${PACKAGE_VERSION}-x86_64.apk
            artifacts/release/weather-app-v${PACKAGE_VERSION}-x86.apk
            artifacts/release/weather-app-v${PACKAGE_VERSION}-universal.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}