name: Signed Release Build

on:
  push:
    branches:
      - main
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  Android:
    name: Android Signed Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out git repository
        uses: actions/checkout@v4

      - name: Setup Env
        uses: ./.github/actions/setup

      - name: Clean up conflicting icon resources
        run: |
          echo "Checking for conflicting icon resources..."
          # Remove .webp files if both .webp and .png exist
          for DIR in app/src/main/res/mipmap-*; do
            if [ -d "$DIR" ]; then
              echo "Checking directory: $DIR"
              for BASE in ic_launcher ic_launcher_round; do
                if [ -f "$DIR/$BASE.webp" ] && [ -f "$DIR/$BASE.png" ]; then
                  echo "Found conflict: $DIR/$BASE.webp and $DIR/$BASE.png"
                  echo "Removing: $DIR/$BASE.webp"
                  rm "$DIR/$BASE.webp"
                fi
              done
            fi
          done

      - name: Debug Keystore Variable
        run: |
          # 检查secret是否设置
          if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "Error: KEYSTORE_BASE64 secret is not set or empty"
            exit 1
          fi
          
          # 输出前几个字符以验证格式(不泄露整个内容)
          echo "First 10 characters of KEYSTORE_BASE64: ${KEYSTORE_BASE64:0:10}..."
          
          # 检查长度
          echo "Length of KEYSTORE_BASE64: ${#KEYSTORE_BASE64}"
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      - name: Decode Keystore
        run: |
          # 创建临时文件
          echo "${{ secrets.KEYSTORE_BASE64 }}" > keystore_base64.txt
          
          # 检查文件是否有效
          cat keystore_base64.txt | head -c 20
          echo "..."
          
          # 尝试解码
          cat keystore_base64.txt | base64 --decode > app/keystore.jks || {
            echo "Failed to decode keystore"
            echo "Checking file format..."
            file keystore_base64.txt
            exit 1
          }
          
          # 验证生成的文件
          if [ -f app/keystore.jks ]; then
            echo "Keystore file created successfully"
            ls -la app/keystore.jks
          else
            echo "Keystore file was not created"
            exit 1
          fi
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      - name: Show system resources
        run: |
          echo "=== Memory Information ==="
          free -h
          
          echo "=== Disk Space ==="
          df -h
          
          echo "=== Java Version ==="
          java -version

      - name: Build Signed APK
        shell: bash
        run: |
          # 配置Gradle属性，增加内存
          echo "org.gradle.jvmargs=-Xmx6g -XX:MaxMetaspaceSize=2g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" > gradle.properties
          echo "org.gradle.parallel=true" >> gradle.properties
          echo "org.gradle.caching=true" >> gradle.properties
          echo "org.gradle.daemon=false" >> gradle.properties
          echo "android.useAndroidX=true" >> gradle.properties
          echo "android.enableJetifier=false" >> gradle.properties
          echo "kotlin.incremental=false" >> gradle.properties
          echo "android.nonTransitiveRClass=true" >> gradle.properties
          echo "kotlin.code.style=official" >> gradle.properties
          echo "android.enableR8.fullMode=false" >> gradle.properties
          
          # 检查updat.md文件
          mkdir -p app/updat
          if [ ! -f app/updat/updat.md ]; then
            echo "v1.0.1" > app/updat/updat.md
            echo "# 天气预报应用" >> app/updat/updat.md
            echo "首次发布" >> app/updat/updat.md
          fi
          
          # 尝试不带签名先构建，检查是否有其他问题
          echo "=== 尝试构建不带签名的调试版本 ==="
          chmod +x gradlew
          ./gradlew clean assembleDebug --stacktrace --debug

          # 构建并签名release版本
          echo "=== 构建签名版本 ==="
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=keystore.jks \
            -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.KEYSTORE_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }} \
            --stacktrace --debug --no-daemon --max-workers=2
          
          # 删除密钥库文件
          rm -f app/keystore.jks

      # 获取package.json的版本号或使用默认版本
      - name: Get package version
        run: |
          if [ -f "package.json" ]; then
            node -p -e '`PACKAGE_VERSION=${require("./package.json").version}`' >> $GITHUB_ENV
          else
            echo "PACKAGE_VERSION=1.0.1" >> $GITHUB_ENV
            echo "package.json not found, using default version: 1.0.1"
          fi

      - name: Create git tag
        uses: pkgdeps/git-tag-action@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          version: ${{ env.PACKAGE_VERSION }}
          git_commit_sha: ${{ github.sha }}
          git_tag_prefix: "v"

      - name: Generate file MD5
        id: md5
        run: |
          echo "Generating MD5 for APK files..."
          cd app/build/outputs/apk/release
          
          echo "MD5 checksums:" > md5_checksums.txt
          md5sum *.apk >> md5_checksums.txt
          cat md5_checksums.txt
          
          # 存储MD5到环境变量
          echo "APK_MD5<<EOF" >> $GITHUB_ENV
          cat md5_checksums.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Upload Artifact
        uses: ./.github/actions/upload-artifact
        env:
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}

  Release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: [Android]
    steps:
      - name: Check out git repository
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Generate Release Notes
        run: |
          # 检查是否存在更新日志文件
          if [ -f "publish/changeLog.md" ]; then
            # 复制基础更新日志
            cp publish/changeLog.md ./release_notes.md
          else
            # 创建默认更新日志
            echo "# 天气预报应用 v${{ env.PACKAGE_VERSION }}" > ./release_notes.md
            echo "" >> ./release_notes.md
            echo "## 更新内容" >> ./release_notes.md
            echo "- 应用更新" >> ./release_notes.md
          fi
          
          # 添加MD5校验
          echo -e "\n### File MD5\n\`\`\`" >> ./release_notes.md
          cd artifacts
          md5sum *.apk >> ../release_notes.md
          echo -e "\`\`\`\n" >> ../release_notes.md
          
          # 添加构建信息
          echo -e "\n### Build Info" >> ./release_notes.md
          echo "- Build Date: $(date +'%Y-%m-%d %H:%M:%S')" >> ./release_notes.md
          echo "- GitHub Action Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> ../release_notes.md

      # 获取package.json的版本号或使用默认版本
      - name: Get package version
        run: |
          if [ -f "package.json" ]; then
            node -p -e '`PACKAGE_VERSION=${require("./package.json").version}`' >> $GITHUB_ENV
          else
            echo "PACKAGE_VERSION=1.0.1" >> $GITHUB_ENV
            echo "package.json not found, using default version: 1.0.1"
          fi

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: ./release_notes.md
          prerelease: false
          draft: false
          tag_name: v${{ env.PACKAGE_VERSION }}
          files: |
            artifacts/weather-app-v${{ env.PACKAGE_VERSION }}-arm64-v8a.apk
            artifacts/weather-app-v${{ env.PACKAGE_VERSION }}-armeabi-v7a.apk
            artifacts/weather-app-v${{ env.PACKAGE_VERSION }}-x86_64.apk
            artifacts/weather-app-v${{ env.PACKAGE_VERSION }}-x86.apk
            artifacts/weather-app-v${{ env.PACKAGE_VERSION }}-universal.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 